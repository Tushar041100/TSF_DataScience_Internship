# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hmJNv_JR6XS4FMY5015nnd9BBp05W-85
"""

# Commented out IPython magic to ensure Python compatibility.
#importing the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
# %matplotlib inline

source = 'http://bit.ly/w-data'
data = pd.read_csv(source)
data.head()

data.tail()

data.describe()

data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage', pad=5)  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.legend(frameon=False)
plt.show()

from sklearn.model_selection import train_test_split 

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values  

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

!pip install lazypredict

from lazypredict.Supervised import LazyRegressor
clf = LazyRegressor(ignore_warnings=True)
models, predictions = clf.fit(X_train, X_test, y_train, y_test)
models

"""As we can see frome the above code output that Lasso Regression has the highest accuracy then anyother Regression Algorithm."""

#implementing Lasso Regression
from sklearn.linear_model import Lasso
regression = Lasso()
regression.fit(X_train, y_train)
print('Test scores')
print(regression.score(X_test, y_test))
print('\nTrain scores')
print(regression.score(X_train, y_train))

#for 9.25 hrs
no_hours = np.array([9.25])
no_hours = no_hours.reshape(-1, 1)
no_hours.shape

prediction = regression.predict(no_hours)
print('Hours : 9.25')
print('Predicted Score:',prediction[0])

line = regression.coef_*X+regression.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

Y_pred = regression.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error

print('Mean Absolute Error: ', mean_absolute_error(y_test, Y_pred))
print('Mean Squared Error:', mean_squared_error(y_test, Y_pred))

#implementing Linear Regression
from sklearn.linear_model import LinearRegression
lr = LinearRegression(normalize=False)
lr.fit(X_train, y_train)
print('Training score')
print(lr.score(X_train, y_train))
print('\nTest score')
print(lr.score(X_test, y_test))

lr_prediction = lr.predict(no_hours)
print('Hours : 9.25')
print('Predicted Score:',lr_prediction[0])

line = lr.coef_*X+lr.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

y_pred = lr.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error

print('Mean Absolute Error: ', mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', mean_squared_error(y_test, y_pred))